{namespace validator.templates}

/**
 * Renders a basic explanation of the validation notice.
 * @param notices : List<[filename : string, fieldName : string, index : number]>
 */
{template .unknownColumnNotice}
{let $numNotices: length($notices)/}
  <button data-toggle="collapse" data-target="#unknownColumnNotice" class="warning collapsed">Warning - Unknown Column(s) found!<span>+</span><p>-</p></button>
  <div class="content collapse in" id="unknownColumnNotice">
    <p>Description: A column name is unknown.</p>
    <p><b>{$numNotices}</b> found:</p>
    <table>
      <thead>
        <tr>
          <th>Filename</th>
          <th>Field name</th>
          <th>Index</th>
        </tr>
      </thead>
      <tbody>
        {foreach $notice in $notices}
          <tr>
            <td>{$notice.filename}</td>
            <td>{$notice.fieldName}</td>
            <td>{$notice.index}</td>
          </tr>
        {/foreach}
      </tbody>
    </table>
    <p>Please delete or rename column!</p>
    <br><br>
  </div>
{/template}

/**
 * Renders a basic explanation of the validation notice.
 * @param notices : List<[filename : string, csvRowNumber : number, rowLength : number, headerCount : number]>
 */
{template .invalidRowLength}
{let $numNotices: length($notices)/}
  <button data-toggle="collapse" data-target="#invalidRowLength" class="error collapsed">Error - Invalid csv row length!<span>+</span><p>-</p></button>
  <div class="content collapse in" id="invalidRowLength">
    <p>Description: A row in the input file has a different number of values than specified by the CSV header.</p>
    <p><b>{$numNotices}</b> found:</p>
    <table>
      <thead>
        <tr>
          <th>Filename</th>
          <th>CSV Row Number</th>
          <th>Row length</th>
          <th>Header count</th>
        </tr>
      </thead>
      <tbody>
        {foreach $notice in $notices}
          <tr>
            <td>{$notice.filename}</td>
            <td>{$notice.csvRowNumber}</td>
            <td>{$notice.rowLength}</td>
            <td>{$notice.headerCount}</td>
          </tr>
        {/foreach}
      </tbody>
    </table>
    <p>Please set the row length as specified by the CSV header!</p>
    <br><br>
  </div>
{/template}

/**
 * Renders a basic explanation of the validation notice.
 * @param notices : List<[stopId : string, csvRowNumber : number, locationType: number, parentStation : string, parentCsvRowNumber: number, parentLocationType: number, expectedLocationType: number]>
 */
{template .wrongParentLocationType}
{let $numNotices: length($notices)/}
  <button data-toggle="collapse" data-target="#wrongParentLocationType" class="error collapsed">Error - Wrong parent location type!<span>+</span><p>-</p></button>
  <div class="content collapse in" id="wrongParentLocationType">
    <p>Description: Incorrect type of the parent location (e.g. a parent for a stop or an entrance must be a station).</p>
    <p><b>{$numNotices}</b> found:</p>
    <table>
      <thead>
        <tr>
          <th>Stop ID</th>
          <th>CSV Row Number</th>
          <th>Location Type</th>
          <th>Parent Station</th>
          <th>Parent CSV Row Number</th>
          <th>Parent Location Type</th>
          <th>Expected Location Type</th>
        </tr>
      </thead>
      <tbody>
        {foreach $notice in $notices}
          <tr>
            <td>{$notice.stopId}</td>
            <td>{$notice.csvRowNumber}</td>
            <td>{$notice.locationType}</td>
            <td>{$notice.parentStation}</td>
            <td>{$notice.parentCsvRowNumber}</td>
            <td>{$notice.parentLocationType}</td>
            <td>{$notice.expectedLocationType}</td>
          </tr>
        {/foreach}
      </tbody>
    </table>
    <p>Please fix the parent location type(s) corresponding to the stop location type(s)!</p>
    <br><br>
  </div>
{/template}

/**
 * Renders a basic explanation of the validation notice.
 * @param notices : List<[shapeId : string, csvRowNumber : number]>
 */
{template .unusedShape}
{let $numNotices: length($notices)/}
  <p class="error">Error - Unused shape!</p>
  <p>Description: The shape in shapes.txt is never used by any trip from trips.txt.</p>
  <p><b>{$numNotices}</b> found:</p>
  <table>
    <thead>
      <tr>
        <th>Shape ID</th>
        <th>CSV Row Number</th>
      </tr>
    </thead>
    <tbody>
      {foreach $notice in $notices}
        <tr>
          <td>{$notice.shapeId}</td>
          <td>{$notice.csvRowNumber}</td>
        </tr>
      {/foreach}
    </tbody>
  </table>
  <p>Please delete the unused shape(s)!</p>
  <br><br>
{/template}

/**
 * Table for fast travel between stops notice. 
 * @param notices : List<[tripId : string, speedkmh : double, stopSequenceList : List<Integer>]>
 */
{template .fastTravelBetweenStops}
{let $numNotices: length($notices)/}
  <p class="warning">Warning - Fast Travel Between Stops found!</p>
  <p>Description: Travel speed between stops is very fast!.</p>
  <p><b>{$numNotices}</b> found:</p>
  <table>
    <thead>
      <tr>
        <th>Trip ID</th>
        <th>Travel Speed km/h</th>
        <th>Stop Sequence</th>
      </tr>
    </thead>
    <tbody>
      {foreach $notice in $notices}
        <tr>
          <td>{$notice.tripId}</td>
          <td>{$notice.speedkmh}</td>
          <td>{$notice.stopSequenceList}</td>
        </tr>
      {/foreach}
    </tbody>
  </table>
  <p>Please check travel speed for the above trip(s)!</p>
  <br><br>
{/template}

/**
 * Table for decreasing shape distance notice. 
 * @param notices : List<[shapeId : string, csvRowNumber : long, shapeDistTraveled : double, shapePtSequence : int, 
 * prevCsvRowNumber : long, prevShapeDistTraveled : double, prevShapePtSequence : int ]>
 */
{template .decreasingShapeDistance}
{let $numNotices: length($notices)/}
  <p class="error">Error - Decreasing Shape Distance(s) found!</p>
  <p>Description: shape_dist_traveled along a shape in "shapes.txt" are not all increasing.</p>
  <p><b>{$numNotices}</b> found:</p>
  <table>
    <thead>
      <tr>
        <th>Shape ID</th>
        <th>CSV Row Number</th>
        <th>Shape Distance Traveled</th>
        <th>Shape Pt Sequence</th>
        <th>Previous CSV Row Number</th>
        <th>Previous Shape Distance Traveled</th>
        <th>Previous Shape Pt Sequence</th>
      </tr>
    </thead>
    <tbody>
      {foreach $notice in $notices}
        <tr>
          <td>{$notice.shapeId}</td>
          <td>{$notice.csvRowNumber}</td>
          <td>{$notice.shapeDistTraveled}</td>
          <td>{$notice.shapePtSequence}</td>
          <td>{$notice.prevCsvRowNumber}</td>
          <td>{$notice.prevShapeDistTraveled}</td>
          <td>{$notice.prevShapePtSequence}</td>
        </tr>
      {/foreach}
    </tbody>
  </table>
  <p>Please check shape dist traveled for the above rows in 'shapes.txt'!</p>
  <br><br>
{/template}

/**
 * Table for decreasing stop time distance notice. 
 * @param notices : List<[tripId : string, csvRowNumber : long, stopSequence : int, shapeDistTraveled : double, 
 * prevCsvRowNumber : long, prevStopSequence : int, prevShapeDistTraveled : double]>
 */
{template .decreasingStopTimeDistance}
{let $numNotices: length($notices)/}
  <p class="error">Error - Decreasing Stop Time Distance(s) found!</p>
  <p>Description: For some trip, stop times have decreasing `shape_dist_travelled` values.</p>
  <p><b>{$numNotices}</b> found:</p>
  <table>
    <thead>
      <tr>
        <th>Trip ID</th>
        <th>CSV Row Number</th>
        <th>Stop Sequence</th>
        <th>Shape Distance Traveled</th>
        <th>Previous CSV Row Number</th>
        <th>Previous Stop Sequence</th>
        <th>Previous Shape Distance Traveled</th>
      </tr>
    </thead>
    <tbody>
      {foreach $notice in $notices}
        <tr>
          <td>{$notice.tripId}</td>
          <td>{$notice.csvRowNumber}</td>
          <td>{$notice.stopSequence}</td>
          <td>{$notice.shapeDistTraveled}</td>
          <td>{$notice.prevCsvRowNumber}</td>
          <td>{$notice.prevStopSequence}</td>
          <td>{$notice.prevShapeDistTraveled}</td>
        </tr>
      {/foreach}
    </tbody>
  </table>
  <p>Please check distance traveled for the above rows in 'stop_times.txt'!</p>
  <br><br>
{/template}

/**
 * Table for feed info language and agency language mismatch 
 * @param notices : List<[feedInfoLang : string, agencyLangCollection : Set<String>]>
 */
{template .feedInfoLangAndAgencyLangMismatch}
{let $numNotices: length($notices)/}
  <p class="error">Error - Language mismatch found!</p>
  <p>Description: Files `agency.txt` and `feed_info.txt` must define matching `agency.agency_lang` and 
    `feed_info.feed_lang`. The default language may be multilingual for datasets with the original text 
    in multiple languages. In such cases, the feed_lang field should contain the language code mul defined 
    by the norm ISO 639-2. If `feed_lang` is not `mul` and does not match with `agency_lang`, that's an 
    error If there is more than one `agency_lang` and `feed_lang` isn't `mul`, that's an error If `feed_lang`
    is `mul` and there isn't more than one `agency_lang`, that's an error</p>
  <p><b>{$numNotices}</b> found:</p>
  <table>
    <thead>
      <tr>
        <th>Feed Info Language</th>
        <th>Agency Language Collection</th>
      </tr>
    </thead>
    <tbody>
      {foreach $notice in $notices}
        <tr>
          <td>{$notice.feedInfoLang}</td>
          <td>{$notice.agencyLangCollection}</td>
        </tr>
      {/foreach}
    </tbody>
  </table>
  <p>Please check languages!</p>
  <br><br>
{/template}

/**
 * Table for inconsistent agency field
 * @param notices : List<[csvRowNumber : long, fieldName : string, expected : string, actual : string]>
 */
{template .inconsistentAgencyField}
{let $numNotices: length($notices)/}
  <p class="error">Error - Inconsistent Agency Field(s) found!</p>
  <p>Description: There is more than 1 agency and timezones or languages are inconsistent among the agencies</p>
  <p><b>{$numNotices}</b> found:</p>
  <table>
    <thead>
      <tr>
        <th>CSV Row Number</th>
        <th>Field Name</th>
        <th>Expected</th>
        <th>Actual</th>
      </tr>
    </thead>
    <tbody>
      {foreach $notice in $notices}
        <tr>
          <td>{$notice.csvRowNumber}</td>
          <td>{$notice.fieldName}</td>
          <td>{$notice.expected}</td>
          <td>{$notice.actual}</td>
        </tr>
      {/foreach}
    </tbody>
  </table>
  <p>Please check timezones/languages!</p>
  <br><br>
{/template}

/**
 * Table for location without parent station notice. 
 * @param notices : List<[String stopId, long csvRowNumber, int locationType]>
 */
{template .locationWithoutParentStation}
{let $numNotices: length($notices)/}
  <p class="error">Error - Location(s) without a parent station found!</p>
  <p>Description: A location that must have `parent_station` field does not have it.</p>
  <p><b>{$numNotices}</b> found:</p>
  <table>
    <thead>
      <tr>
        <th>Stop ID</th>
        <th>CSV Row Number</th>
        <th>Location Type</th>
      </tr>
    </thead>
    <tbody>
      {foreach $notice in $notices}
        <tr>
          <td>{$notice.stopId}</td>
          <td>{$notice.csvRowNumber}</td>
          <td>{$notice.locationType}</td>
        </tr>
      {/foreach}
    </tbody>
  </table>
  <p>Please check the parent locations for the above stops!</p>
  <br><br>
{/template}


/**
 * Table for meaningless trip with no more than one stop
 * @param notices : List<[String tripId, long csvRowNumber]>
 */
{template .meaninglessTripWithNoMoreThanOneStop}
{let $numNotices: length($notices)/}
  <p class="error">Error - Meaningless trip(s) found!</p>
  <p>Description: A trip must have at least 2 stops.</p>
  <p><b>{$numNotices}</b> found:</p>
  <table>
    <thead>
      <tr>
        <th>Trip ID</th>
        <th>CSV Row Number</th>
      </tr>
    </thead>
    <tbody>
      {foreach $notice in $notices}
        <tr>
          <td>{$notice.tripId}</td>
          <td>{$notice.csvRowNumber}</td>
        </tr>
      {/foreach}
    </tbody>
  </table>
  <p>Please above trip(s)!</p>
  <br><br>
{/template}

/**
 * Table for missing trip edge stop time notice
 * @param notices : List<[String arrivalOrDepartureTime, String tripId, long csvRowNumber, int stopSequence]>
 */
{template .missingTripEdgeStopTime}
{let $numNotices: length($notices)/}
  <p class="error">Error - Missing arrival or departure time for trip(s)!</p>
  <p>Description: The first and last stop for each trip should have both an arrival and departure time.</p>
  <p><b>{$numNotices}</b> found:</p>
  <table>
    <thead>
      <tr>
        <th>Trip ID</th>
        <th>CSV Row Number</th>
        <th>Arrival / Depature Time</th>
        <th>Stop Sequence</th>
      </tr>
    </thead>
    <tbody>
      {foreach $notice in $notices}
        <tr>
          <td>{$notice.tripId}</td>
          <td>{$notice.csvRowNumber}</td>
          <td>{$notice.arrivalOrDepartureTime}</td>
          <td>{$notice.stopSequence}</td>
        </tr>
      {/foreach}
    </tbody>
  </table>
  <p>Please check above trip(s)!</p>
  <br><br>
{/template}



/**
 * Table for overlapping frequency
 * @param notices : List<[long prevCsvRowNumber, GtfsTime prevEndTime, long currCsvRowNumber, GtfsTime currStartTime, String tripId]>
 */
{template .overlappingFrequency}
{let $numNotices: length($notices)/}
  <p class="error">Error - Overlapping frequency entries found!</p>
  <p>Description: Two frequency entries referring to the same trip may not have an overlapping time range.</p>
  <p><b>{$numNotices}</b> found:</p>
  <table>
    <thead>
      <tr>
        <th>Trip ID</th>
        <th>Current CSV Row Number</th>
        <th>Current Start Time</th>
        <th>Previous CSV Row Number</th>
        <th>Previous End Time</th>
      </tr>
    </thead>
    <tbody>
      {foreach $notice in $notices}
        <tr>
          <td>{$notice.tripId}</td>
          <td>{$notice.currCsvRowNumber}</td>
          <td>{$notice.currStartTime}</td>
          <td>{$notice.prevCsvRowNumber}</td>
          <td>{$notice.prevEndTime}</td>
        </tr>
      {/foreach}
    </tbody>
  </table>
  <p>Please check above trip(s)!</p>
  <br><br>
{/template}

/**
 * Renders a basic explanation of the trip with duplicate stops notice.
 * @param notices : List<[stopName : string, stopId1 : string, csvRowNumberStop1 : number, stopId2 : string, csvRowNumberStop2 : number, routeId : string, exampleTripId : string]>
 */
{template .tripWithDuplicateStops}
{let $numNotices: length($notices)/}
  <p class="warning">Warning - Trip with duplicate stops!</p>
  <p>Description: For a trip, consecutive stop times have the same stop name.</p>
  <p><b>{$numNotices}</b> found:</p>
  <table>
    <thead>
      <tr>
        <th>Stop Name</th>
        <th>Stop ID 1</th>
        <th>CSV Row Number Stop 1</th>
        <th>Stop ID 2</th>
        <th>CSV Row Number Stop 2</th>
        <th>Route ID</th>
        <th>Example Trip ID</th>
      </tr>
    </thead>
    <tbody>
      {foreach $notice in $notices}
        <tr>
          <td>{$notice.stopName}</td>
          <td>{$notice.stopId1}</td>
          <td>{$notice.csvRowNumberStop1}</td>
          <td>{$notice.stopId2}</td>
          <td>{$notice.csvRowNumberStop2}</td>
          <td>{$notice.routeId}</td>
          <td>{$notice.exampleTripId}</td>
        </tr>
      {/foreach}
    </tbody>
  </table>
  <p>Please fix the problem of stop names for the corresponding trip(s)!</p>
  <br><br>
{/template} 

/**
 * Renders a basic explanation of the stops too close notice.
 * @param notices : List<[stopId1 : string, csvRowNumberStop1 : number, stopId2 : string, csvRowNumberStop2 : number, tripBufferMeters : number]>
 */
{template .stopsTooClose}
{let $numNotices: length($notices)/}
  <p class="warning">Warning - Stops too close!</p>
  <p>Description: Two stops are too close with each other.</p>
  <p><b>{$numNotices}</b> found:</p>
  <table>
    <thead>
      <tr>
        <th>Stop ID 1</th>
        <th>CSV Row Number Stop 1</th>
        <th>Stop ID 2</th>
        <th>CSV Row Number Stop 2</th>
        <th>Trip Buffer in Meters</th>
      </tr>
    </thead>
    <tbody>
      {foreach $notice in $notices}
        <tr>
          <td>{$notice.stopId1}</td>
          <td>{$notice.csvRowNumberStop1}</td>
          <td>{$notice.stopId2}</td>
          <td>{$notice.csvRowNumberStop2}</td>
          <td>{$notice.tripBufferMeters}</td>
        </tr>
      {/foreach}
    </tbody>
  </table>
  <p>Please fix the stops positions to make their distance further than the trip buffer meters!</p>
  <br><br>
{/template} 

/**
 * Renders a basic explanation of the stop too far from trip shape notice.
 * @param notices : List<[stopId : string, stopSequence : number, tripId : string, shapeId : string, tripBufferMeters : number]>
 */
{template .stopTooFarFromTripShape}
{let $numNotices: length($notices)/}
  <p class="error">Error - Stop too far from trip shape!</p>
  <p>Description: Stop is too far away from the trip shape.</p>
  <p><b>{$numNotices}</b> found:</p>
  <table>
    <thead>
      <tr>
        <th>Stop ID</th>
        <th>Stop Sequence</th>
        <th>Trip ID</th>
        <th>Shape ID</th>
        <th>Trip Buffer Meters</th>
      </tr>
    </thead>
    <tbody>
      {foreach $notice in $notices}
        <tr>
          <td>{$notice.stopId}</td>
          <td>{$notice.stopSequence}</td>
          <td>{$notice.tripId}</td>
          <td>{$notice.shapeId}</td>
          <td>{$notice.tripBufferMeters}</td>
        </tr>
      {/foreach}
    </tbody>
  </table>
  <p>Please fix the stop position to be within the trip buffer of the trip shape!</p>
  <br><br>
{/template} 

/**
 * Renders a basic explanation of the stop time with only arrival or departure time notice.
 * @param notices : List<[csvRowNumber : number, tripId : string, stopSequence : number, specifiedField : string]>
 */
{template .stopTimeWithOnlyArrivalOrDepartureTime}
{let $numNotices: length($notices)/}
  <p class="warning">Warning - Stop time with only arrival or departure time!</p>
  <p>Description: Stop time is with only arrival time or departure time.</p>
  <p><b>{$numNotices}</b> found:</p>
  <table>
    <thead>
      <tr>
        <th>CSV Row Number</th>
        <th>Trip ID</th>
        <th>Stop Sequence</th>
        <th>Specified Field</th>
      </tr>
    </thead>
    <tbody>
      {foreach $notice in $notices}
        <tr>
          <td>{$notice.csvRowNumber}</td>
          <td>{$notice.tripId}</td>
          <td>{$notice.stopSequence}</td>
          <td>{$notice.specifiedField}</td>
        </tr>
      {/foreach}
    </tbody>
  </table>
  <p>Please fill in the missing arrival time or departure time for the stop time!</p>
  <br><br>
{/template} 

/**
 * Renders a basic explanation of the stop time with departure before arrival time notice.
 * @param notices : List<[csvRowNumber : number, tripId : string, stopSequence : number, departureTime : string, arrivalTime: string]>
 */
{template .stopTimeWithDepartureBeforeArrivalTime}
{let $numNotices: length($notices)/}
  <p class="error">Error - Stop time with departure before arrival time!</p>
  <p>Description: Departure time is before arrival time for the stop time.</p>
  <p><b>{$numNotices}</b> found:</p>
  <table>
    <thead>
      <tr>
        <th>CSV Row Number</th>
        <th>Trip ID</th>
        <th>Stop Sequence</th>
        <th>Departure Time</th>
        <th>Arrival Time</th>
      </tr>
    </thead>
    <tbody>
      {foreach $notice in $notices}
        <tr>
          <td>{$notice.csvRowNumber}</td>
          <td>{$notice.tripId}</td>
          <td>{$notice.stopSequence}</td>
          <td>{$notice.departureTime}</td>
          <td>{$notice.arrivalTime}</td>
        </tr>
      {/foreach}
    </tbody>
  </table>
  <p>Please fix the departure time or the arrival time!</p>
  <br><br>
{/template} 

/**
 * Renders a basic explanation of the stop time with arrival before previous departure time notice.
 * @param notices : List<[csvRowNumber : number, prevCsvRowNumber: number, tripId : string, departureTime : string, arrivalTime: string]>
 */
{template .stopTimeWithArrivalBeforePreviousDepartureTime}
{let $numNotices: length($notices)/}
  <p class="error">Error - Stop time with arrival before previous departure time!</p>
  <p>Description: Arrival for the stop time is before its corresponding previous departure time.</p>
  <p><b>{$numNotices}</b> found:</p>
  <table>
    <thead>
      <tr>
        <th>CSV Row Number</th>
        <th>Previous CSV Row Number</th>
        <th>Trip ID</th>
        <th>Previous Departure Time</th>
        <th>Arrival Time</th>
      </tr>
    </thead>
    <tbody>
      {foreach $notice in $notices}
        <tr>
          <td>{$notice.csvRowNumber}</td>
          <td>{$notice.prevCsvRowNumber}</td>
          <td>{$notice.tripId}</td>
          <td>{$notice.departureTime}</td>
          <td>{$notice.arrivalTime}</td>
        </tr>
      {/foreach}
    </tbody>
  </table>
  <p>Please fix the arrival time or the previous departure time for the stop time!</p>
  <br><br>
{/template}

/**
 * Renders a basic explanation of the station with parent station notice.
 * @param notices : List<[stopId : string, csvRowNumber : number, parentStation : string]>
 */
{template .stationWithParentStation}
{let $numNotices: length($notices)/}
  <p class="error">Error - Station with parent station!</p>
  <p>Description: A station has parent_station field set.</p>
  <p><b>{$numNotices}</b> found:</p>
  <table>
    <thead>
      <tr>
        <th>Station ID</th>
        <th>CSV Row Number</th>
        <th>Parent Station</th>
      </tr>
    </thead>
    <tbody>
      {foreach $notice in $notices}
        <tr>
          <td>{$notice.stopId}</td>
          <td>{$notice.csvRowNumber}</td>
          <td>{$notice.parentStation}</td>
        </tr>
      {/foreach}
    </tbody>
  </table>
  <p>Please delete the parent station of the station!</p>
  <br><br>
{/template}
